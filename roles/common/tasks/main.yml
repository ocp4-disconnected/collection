- name: Fail if the playbook is run as root
  ansible.builtin.fail:
    msg: "This playbook should not be run as root!"
  when: ansible_facts.env.USER == 'root'

- name: Ensure required packages are installed
  ansible.builtin.package:
    name: nmstate,openssl,httpd-tools,podman,git,python3-jmespath,coreos-installer ## Variablize pls common_packages: (Maybe add extra packages var?)
    state: present
  become: true

- name: Ensure destination directory exists
  ansible.builtin.file:
    path: /usr/bin
    state: directory
    mode: '0555'
  become: true

- name: Create cluster directories
  ansible.builtin.file:
    path: "{{ item }}"
    mode: '0755'
    state: directory
  with_items:
    - "{{ common_openshift_client_bin }}"
    - "{{ common_openshift_oc_mirror_dir }}"
    - "{{ common_openshift_download_dir }}"
    - "{{ common_git_repos_dir }}"
    - "{{ common_openshift_download_dir }}/collections"

- name: Check for binaries in {{ common_openshift_client_bin }}
  ansible.builtin.stat:
    path: "{{ common_openshift_client_bin }}/{{ item }}"
  register: download_bin
  failed_when: false
  changed_when: "not download_bin.stat.exists"
  with_items:
    - butane
    - helm
    - kubectl
    - oc
    - oc-mirror
    - openshift-install
    - openshift-install-fips
    - tridentctl

- name: Download oc tools
  ansible.builtin.get_url:
    url: "{{ common_openshift_download_base_url }}/ocp/{{ common_openshift_release }}/{{ item }}"
    dest: "{{ common_openshift_download_dir }}"
    mode: '0644'
  with_items:
    - openshift-client-linux.tar.gz
    - openshift-install-linux.tar.gz
    - openshift-install-rhel9-amd64.tar.gz
  when: download_bin is changed


- name: Download latest oc-mirror
  ansible.builtin.get_url:
    url: "{{ common_openshift_download_base_url }}/ocp/{{ common_oc_mirror_release }}/{{ item }}"
    dest: "{{ common_openshift_download_dir }}"
    mode: '0644'
  with_items:
    - oc-mirror.rhel9.tar.gz
  when: download_bin is changed

- name: Extract oc tools
  ansible.builtin.unarchive:
    src: "{{ common_openshift_download_dir }}/{{ item }}"
    remote_src: true
    mode: '0755'
    exclude:
      - README.md
    dest: "{{ common_openshift_client_bin }}"
  with_items:
    - openshift-client-linux.tar.gz
    - oc-mirror.rhel9.tar.gz
    - openshift-install-linux.tar.gz
    - openshift-install-rhel9-amd64.tar.gz
  when: download_bin is changed

- name: Remove oc tools tar
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_fileglob:
    - "{{ common_openshift_download_dir }}/*tar.gz"
  when: download_bin is changed

- name: Download trident tar
  ansible.builtin.get_url:
    url: "https://github.com/NetApp/trident/releases/download/{{ common_trident_version }}/trident-installer-{{ common_trident_version  | replace('v', '') }}.tar.gz"
    dest: "{{ common_openshift_download_dir }}"
    mode: '0755'
  when: download_bin is changed

- name: Extract trident binary
  ansible.builtin.unarchive:
    src: "{{ common_openshift_download_dir }}/trident-installer-{{ common_trident_version | replace('v', '') }}.tar.gz"
    remote_src: true
    include:
      - trident-installer/tridentctl
    dest: "{{ common_openshift_client_bin }}"
  when: download_bin is changed

- name: Move tridentctl to proper location
  ansible.builtin.copy:
    remote_src: true
    src: "{{ common_openshift_client_bin }}/trident-installer/tridentctl"
    dest: "{{ common_openshift_client_bin }}/tridentctl"
    mode: '0755'
  when: download_bin is changed

- name: Remove trident-installers
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ common_openshift_client_bin }}/trident-installer"
    - "{{ common_openshift_download_dir }}/trident-installer-{{ common_trident_version  | replace('v', '') }}.tar.gz"
  when: download_bin is changed

- name: Download butane binary
  ansible.builtin.get_url:
    url: "{{ common_openshift_download_base_url }}/butane/latest/butane"
    dest: "{{ common_openshift_client_bin }}"
    mode: '0755'
  when: download_bin is changed

- name: Download helm binary
  ansible.builtin.get_url:
    url: "{{ common_openshift_download_base_url }}/helm/latest/helm-linux-amd64"
    dest: "{{ common_openshift_client_bin }}/helm"
    mode: '0755'
  when: download_bin is changed

- name: Check for binaries in /usr/bin/
  ansible.builtin.stat:
    path: "/usr/bin/{{ item }}"
  register: move_bin
  failed_when: false
  changed_when: "not move_bin.stat.exists"
  with_items:
    - butane
    - helm
    - kubectl
    - oc
    - oc-mirror
    - openshift-install
    - openshift-install-fips
    - tridentctl

- name: Move binaries to destination directory
  ansible.builtin.copy:
    src: "{{ common_openshift_client_bin }}/{{ item }}"
    dest: /usr/bin/
    mode: '0755'
    remote_src: yes
  become: true
  with_items:
    - butane
    - helm
    - kubectl
    - oc
    - oc-mirror
    - openshift-install
    - openshift-install-fips
    - tridentctl
  when: move_bin is changed

- name: Validate openshift-install version
  ansible.builtin.shell: "openshift-install version"
  register: install_check
  ignore_errors: true
  failed_when: 
    - 'install_check.rc != 0'
    - "'{{ common_openshift_release}}' not in install_check.stdout"
  changed_when: false
  when: not common_fips_enabled 

- name: Validate openshift-install-fips version
  ansible.builtin.shell: "openshift-install-fips version"
  register: install_check
  ignore_errors: true
  failed_when: 
    - 'install_check.rc != 0'
    - "'{{ common_openshift_release}}' not in install_check.stdout"
  changed_when: false
  when: common_fips_enabled 

- name: Check for saved registry
  ansible.builtin.stat:
    path:  "{{ common_openshift_oc_mirror_dir }}/registry.tar"
  register: registry
  changed_when: 'not registry.stat.exists'
  failed_when: false
  notify:
    - Registry_image

- name: Pull registry image
  containers.podman.podman_image:
    name: docker.io/library/registry
  when: registry is changed

- name: Save registry image
  containers.podman.podman_save:
    image: docker.io/library/registry
    dest: "{{ common_openshift_oc_mirror_dir }}/registry.tar"
  when: registry is changed

- name: Get file metadata for requirements.yml
  ansible.builtin.stat:
    path: "{{ common_openshift_download_dir }}/collections/requirements.yml"
  register: collection_age

- name: Calculate file age in days if file exists
  set_fact:
    file_age_days: "{{ (ansible_date_time.epoch | int - collection_age.stat.atime) // 86400 }}"
  when: collection_age.stat.exists

- name: Download required ansible collections
  ansible.builtin.command: 
    cmd: ansible-galaxy collection download --requirements-file ../collections/requirements.yml --download-path {{ common_openshift_download_dir }}/collections
  when: ( file_age_days | default(4) | int ) > 3 or not collection_age.stat.exists

#- name: Download required ansible collections
#  community.general.ansible_galaxy_install:
#    type: collection
#    dest: "{{ common_openshift_download_dir }}/collections"
#    requirements_file: "{{ playbook_dir }}/../collections/requirements.yml"

- name: check for pre-downloaded RHCOS image
  ansible.builtin.find:
    paths: "{{ common_openshift_download_dir }}"
    patterns: "*.iso"
  register: rhcos_downloaded
  failed_when: false
  changed_when: rhcos_downloaded.matched == 0

- name: Check if .cache directory exists
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/.cache"
  register: cache_dir
  failed_when: false
  changed_when: 'not cache_dir.stat.exists'

- name: Find pre-staged RHCOS image if .cache directory exists
  ansible.builtin.find:
    paths: "{{ ansible_user_dir }}/.cache/agent/image_cache"
    patterns: "*.iso"
  register: rhcos
  when: cache_dir.stat.exists
  changed_when: rhcos.matched == 0
  failed_when: false

- name: Create RHCOS iso prestage directory
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.cache/agent/image_cache"
    state: directory
  when: rhcos is changed

- block:
  - block:
    - name: Detect RHCOS image URL
      ansible.builtin.command: 
        cmd: "{{ common_openshift_client_bin }}/openshift-install-fips coreos print-stream-json"
      register: rhcos_image_info_fips
      no_log: true

    - name: Parse RHCOS image URL
      set_fact:
        rhcos_image_url: "{{ rhcos_image_info_fips.stdout | from_json | json_query('architectures.x86_64.artifacts.metal.formats.iso.disk.location') }}"

    - name: Download RHCOS image
      get_url:
        url: "{{ rhcos_image_url }}"
        dest: "{{ common_openshift_download_dir }}/"
        mode: '0644'

    when: not common_fips_enabled 

  - block:
    - name: Detect RHCOS image URL FIPS
      ansible.builtin.command: 
        cmd: "{{ common_openshift_client_bin }}/openshift-install-fips coreos print-stream-json"
      register: rhcos_image_info_fips
      no_log: true

    - name: Parse RHCOS image URL FIPS
      set_fact:
        rhcos_image_url: "{{ rhcos_image_info_fips.stdout | from_json | json_query('architectures.x86_64.artifacts.metal.formats.iso.disk.location') }}"

    - name: Download RHCOS image FIPS
      get_url:
        url: "{{ rhcos_image_url }}"
        dest: "{{ common_openshift_download_dir }}/"
        mode: '0644'

    when: common_fips_enabled 

  when: rhcos_downloaded is changed

- name: Prestage RHCOS iso to {{ ansible_user_dir }}/.cache/agent/image_cache
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ansible_user_dir }}/.cache/agent/image_cache"
  with_fileglob:
    - "{{ common_openshift_download_dir }}/*iso"
  when: rhcos is changed

- name: Clone git repositories if not present
  ansible.builtin.git:
    repo: "{{ item }}"
    dest: "{{ common_git_repos_dir }}/{{ item | basename }}"
    clone: yes
    update: yes
    bare: true
  loop: "{{ common_git_repos }}"
  loop_control:
    label: "{{ item }}"
  when: mirror_content_pull_mirror is true

- ansible.builtin.include_tasks: generate_ca.yml
  when: not common_connected_cluster 
  
