---
- name: Create cluster install dir
  ansible.builtin.file:
    path: "{{ item }}"
    mode: '0755'
    state: directory
  with_items:
    - "{{ common_openshift_cluster_install_dir }}"
    - "{{ agent_iso_openshift_cluster_config_dir }}"
    - "{{ ansible_user_dir }}/.kube"
    - "{{ ansible_user_dir }}/.ssh"
    - "{{ ansible_user_dir }}/.docker"

- name: Generate RSA ssh keys
  community.crypto.openssh_keypair:
    path: "{{ common_ssh_key }}"
    size: 2048
    type: rsa
    state: present

- name: Check if {{ ansible_user_dir }}/.docker/config.json exists
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/.docker/config.json"
  register: docker_config_json
  failed_when: not docker_config_json.stat.exists

- name: Load and validate JSON file
  ansible.builtin.slurp:
    path: "{{ ansible_user_dir }}/.docker/config.json"
  register: docker_config_json_content
  when: docker_config_json.stat.exists

- name: Parse and validate JSON
  set_fact:
    config_json: "{{ docker_config_json_content.content | b64decode | from_json }}"
  when: docker_config_json.stat.exists

- name: Set fact for {{ common_ip_space }} IPv4 address
  set_fact:
    ipv4_address: "{{ ansible_all_ipv4_addresses | select('match', '^' + common_ip_space + '\\.') | list }}"
  when: ipv4_address is undefined

- name: Check if FIPS mode is enabled
  command: fips-mode-setup --check
  register: fips_check_result
  failed_when: false
  become: true
  when: common_fips_enabled is undefined

- name: Set common_fips_enabled fact
  set_fact:
    common_fips_enabled: "{{ 'enabled' in fips_check_result.stdout }}"
  when: common_fips_enabled is undefined

- name: Generate configuration files
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ common_openshift_cluster_install_dir }}/{{ item }}-copy"
    mode: '0644'
    owner: "{{ ansible_user_id }}"
    group: wheel
  become: true
  with_items:
   - install-config.yaml
   - agent-config.yaml
  register: install_templates     

- name: Create copys of configuration files
  ansible.builtin.copy:
    src: "{{ common_openshift_cluster_install_dir }}/{{ item }}-copy"
    dest: "{{ common_openshift_cluster_install_dir }}/{{ item }}"
    remote_src: yes
  with_items:
   - install-config.yaml
   - agent-config.yaml

- include_tasks: agent_iso_network_checks.yml
  when: agent_iso_network_checks | bool

- name: check to see if previous iso exists
  ansible.builtin.stat:
    path: "{{ common_openshift_cluster_install_dir }}/agent.x86_64.iso"
  register: agent_iso
  failed_when: false
  changed_when: 'not agent_iso.stat.exists'

- name: Delete .openshift_install_state.json if agent_iso does not exist
  ansible.builtin.file:
    path: "{{ common_openshift_cluster_install_dir }}/.openshift_install_state.json"
    state: absent
  when: 'agent_iso is changed'

- name: Generate ISO
  ansible.builtin.command:
    cmd:  "{{ 'openshift-install-fips' if common_fips_enabled else 'openshift-install' }} agent create image --dir {{ common_openshift_cluster_install_dir }}"
  when: 
    - (agent_iso is changed or install_templates is changed)
  register: gen_iso

- name: copy new kubeconfig to {{ ansible_user_dir }}/.kube/config, will make backup if something exsists
  ansible.builtin.copy:
    src: "{{ common_openshift_cluster_install_dir }}/auth/kubeconfig"
    dest: '{{ ansible_user_dir }}/.kube/config'
    remote_src: true
    mode: '0644'
    backup: true
  when: gen_iso is changed or gen_iso_fips is changed

- name: Insert master-0 IP as nameserver
  ansible.builtin.lineinfile:
    path: /etc/resolv.conf
    line: "nameserver {{ common_ip_space }}.{{ common_nodes | selectattr('name', 'equalto', 'master-0') | map(attribute='ip') | first }}"
    insertafter: '^nameserver'
  when: 
    - common_ip_space is defined
    - common_nodes is defined
  become: true